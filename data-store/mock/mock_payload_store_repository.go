// Code generated by MockGen. DO NOT EDIT.
// Source: payload_store_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ktr03rtk/touring-log-service/data-store/domain/model"
)

// MockPayloadStoreRepository is a mock of PayloadStoreRepository interface.
type MockPayloadStoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadStoreRepositoryMockRecorder
}

// MockPayloadStoreRepositoryMockRecorder is the mock recorder for MockPayloadStoreRepository.
type MockPayloadStoreRepositoryMockRecorder struct {
	mock *MockPayloadStoreRepository
}

// NewMockPayloadStoreRepository creates a new mock instance.
func NewMockPayloadStoreRepository(ctrl *gomock.Controller) *MockPayloadStoreRepository {
	mock := &MockPayloadStoreRepository{ctrl: ctrl}
	mock.recorder = &MockPayloadStoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayloadStoreRepository) EXPECT() *MockPayloadStoreRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockPayloadStoreRepository) Store(arg0 context.Context, arg1 *model.Payload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockPayloadStoreRepositoryMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockPayloadStoreRepository)(nil).Store), arg0, arg1)
}
