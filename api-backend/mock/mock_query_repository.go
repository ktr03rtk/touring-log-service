// Code generated by MockGen. DO NOT EDIT.
// Source: query_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQueryRepository is a mock of QueryRepository interface.
type MockQueryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQueryRepositoryMockRecorder
}

// MockQueryRepositoryMockRecorder is the mock recorder for MockQueryRepository.
type MockQueryRepositoryMockRecorder struct {
	mock *MockQueryRepository
}

// NewMockQueryRepository creates a new mock instance.
func NewMockQueryRepository(ctrl *gomock.Controller) *MockQueryRepository {
	mock := &MockQueryRepository{ctrl: ctrl}
	mock.recorder = &MockQueryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryRepository) EXPECT() *MockQueryRepositoryMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockQueryRepository) Fetch(rawQuery string, args []interface{}, scanType interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", rawQuery, args, scanType)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockQueryRepositoryMockRecorder) Fetch(rawQuery, args, scanType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockQueryRepository)(nil).Fetch), rawQuery, args, scanType)
}
