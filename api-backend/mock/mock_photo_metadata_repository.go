// Code generated by MockGen. DO NOT EDIT.
// Source: photo_metadata_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ktr03rtk/touring-log-service/api-backend/domain/model"
)

// MockPhotoMetadataRepository is a mock of PhotoMetadataRepository interface.
type MockPhotoMetadataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoMetadataRepositoryMockRecorder
}

// MockPhotoMetadataRepositoryMockRecorder is the mock recorder for MockPhotoMetadataRepository.
type MockPhotoMetadataRepositoryMockRecorder struct {
	mock *MockPhotoMetadataRepository
}

// NewMockPhotoMetadataRepository creates a new mock instance.
func NewMockPhotoMetadataRepository(ctrl *gomock.Controller) *MockPhotoMetadataRepository {
	mock := &MockPhotoMetadataRepository{ctrl: ctrl}
	mock.recorder = &MockPhotoMetadataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoMetadataRepository) EXPECT() *MockPhotoMetadataRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPhotoMetadataRepository) Create(arg0 *model.Photo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPhotoMetadataRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPhotoMetadataRepository)(nil).Create), arg0)
}
