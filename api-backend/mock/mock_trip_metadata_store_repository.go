// Code generated by MockGen. DO NOT EDIT.
// Source: trip_metadata_store_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ktr03rtk/touring-log-service/api-backend/domain/model"
)

// MockTripMetadataStoreRepository is a mock of TripMetadataStoreRepository interface.
type MockTripMetadataStoreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTripMetadataStoreRepositoryMockRecorder
}

// MockTripMetadataStoreRepositoryMockRecorder is the mock recorder for MockTripMetadataStoreRepository.
type MockTripMetadataStoreRepositoryMockRecorder struct {
	mock *MockTripMetadataStoreRepository
}

// NewMockTripMetadataStoreRepository creates a new mock instance.
func NewMockTripMetadataStoreRepository(ctrl *gomock.Controller) *MockTripMetadataStoreRepository {
	mock := &MockTripMetadataStoreRepository{ctrl: ctrl}
	mock.recorder = &MockTripMetadataStoreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTripMetadataStoreRepository) EXPECT() *MockTripMetadataStoreRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTripMetadataStoreRepository) Create(arg0 *model.Trip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTripMetadataStoreRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTripMetadataStoreRepository)(nil).Create), arg0)
}

// FindByDateAndUnit mocks base method.
func (m *MockTripMetadataStoreRepository) FindByDateAndUnit(year, month, day int, unit string) (*model.Trip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDateAndUnit", year, month, day, unit)
	ret0, _ := ret[0].(*model.Trip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDateAndUnit indicates an expected call of FindByDateAndUnit.
func (mr *MockTripMetadataStoreRepositoryMockRecorder) FindByDateAndUnit(year, month, day, unit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDateAndUnit", reflect.TypeOf((*MockTripMetadataStoreRepository)(nil).FindByDateAndUnit), year, month, day, unit)
}
